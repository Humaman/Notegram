// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum ReminderStatus {
  PENDING // напоминание ожидает отправки
  SENT // напоминание отправлено, но ещё не подтверждено
  CONFIRMED // напоминание подтверждено пользователем
}

enum FolderType {
  DEFAULT // стандартная папка для заметок
  TRASH // папка для удалённых заметок
  CUSTOM // пользовательская папка, создаваемая вручную
}

model AuthCode {
  id          String   @id @default(uuid())
  code        String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  clientId    String
  redirectUri String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
}

model User {
  id Int @id @unique @default(autoincrement())

  tg_id String @unique

  yandex_password String @unique

  authCodes AuthCode[]
  notes     Note[]
  folders   Folder[]
  reminders Reminder[]

  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @default(now()) @updatedAt @map("updated_at")
}

model Note {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  folder   Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId Int

  messageId Int @unique

  text    String?
  caption String?
  image   String?
  video   String?
  audio   String?
  doc     String?

  reminder Reminder?

  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @default(now()) @updatedAt @map("updated_at")
}

model Folder {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  title String
  notes Note[]

  type FolderType @default(CUSTOM)

  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @default(now()) @updatedAt @map("updated_at")
}

model Reminder {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  remindAt   DateTime
  status     ReminderStatus @default(PENDING)
  retryCount Int            @default(0)

  note   Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId Int  @unique

  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @default(now()) @updatedAt @map("updated_at")
}

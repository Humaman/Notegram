import { FolderType } from '@prisma/client';

import { CustomContext } from '../../types/custom-context.interface';
import { NoteCreateInput } from '../../types/note-create.interface';

import { getNoteKb } from './note.inline';

export async function noteHandler(ctx: CustomContext, noteData: NoteCreateInput) {
  console.debug('–ë–û–¢ –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', ctx.msg.from.id);

  if (noteData.text && noteData.text.length > 4000) {
    await ctx.reply(
      '–î–ª–∏–Ω–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 4000 —Å–∏–º–≤–æ–ª–æ–≤. –Ø –Ω–µ —Å–º–æ–≥—É –µ—ë –¥–æ–±–∞–≤–∏—Ç—å üòî',
    );
    return;
  }

  if (noteData.caption && noteData.caption.length > 928) {
    await ctx.reply(
      '–î–ª–∏–Ω–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏ c –º–µ–¥–∏–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 928 —Å–∏–º–≤–æ–ª–æ–≤. –Ø –Ω–µ —Å–º–æ–≥—É –µ—ë –¥–æ–±–∞–≤–∏—Ç—å üòî',
    );
    return;
  }

  const prismaCall = await tryAddNote(ctx, noteData);

  if (prismaCall) {
    const messageId = String(ctx.msg.message_id);
    return sendNoteMessage(ctx, messageId);
  } else {
    return ctx.reply(
      '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.',
    );
  }
}

export async function sendNoteMessage(ctx: CustomContext, messageId: string) {
  const kb = getNoteKb(messageId);
  try {
    await ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–º–µ—Ç–∫–∏!', {
      reply_markup: kb,
      reply_parameters: { message_id: Number(messageId) },
    });
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–º–µ—Ç–∫—É', e);
    await ctx.reply(
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–º–µ—Ç–∫—É. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã —É–¥–∞–ª–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–π...',
    );
  }
}

export async function tryAddNote(ctx: CustomContext, noteData: NoteCreateInput) {
  try {
    const folder = await prisma.folder.findFirst({
      where: { userId: ctx.session.user.id, type: FolderType.DEFAULT },
    });
    await prisma.note.create({
      data: {
        user: { connect: { id: ctx.session.user.id } },
        folder: { connect: { id: folder.id } },
        ...noteData,
      },
    });
    return true;
  } catch (e) {
    console.error('\x1b[31mError while adding message:\x1b[0m', e);
    return false;
  }
}

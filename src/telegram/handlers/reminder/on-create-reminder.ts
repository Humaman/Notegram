import * as chrono from 'chrono-node';
import { InlineKeyboard } from 'grammy';

import { botState } from '../../types/bot-state';
import { callbackEnum } from '../../types/callback.enum';
import { CustomContext } from '../../types/custom-context.interface';
import { returnNoteMenu } from '../note/return-note-menu';

export async function onNewReminder(ctx: CustomContext) {
  ctx.session.currentNoteId = Number(ctx.match[1]);
  ctx.session.currentMenuId = ctx.callbackQuery.message.message_id;

  const kb = new InlineKeyboard()
    .text('üìÖ –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É', callbackEnum.ENTER_REMINDER_DATE)
    .text('üîô –û—Ç–º–µ–Ω–∞', callbackEnum.CANCEL_NEW_REMINDER);

  const note = await prisma.note.findUnique({
    where: { messageId: ctx.session.currentNoteId },
    include: { reminder: true },
  });

  let text;
  if (note.reminder)
    text =
      `üìù –£ –∑–∞–º–µ—Ç–∫–∏ –µ—Å—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ ${note.reminder.remindAt.toLocaleString('ru-RU')}!\n\n` +
      '‚è∞ –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –Ω–∞–∂–∞–≤ "üìÖ –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É".';
  else
    text =
      'üìù –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ —ç—Ç–æ–π –∑–∞–º–µ—Ç–∫–∏!\n\n' +
      '‚è∞ –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ "üìÖ –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É", –∏ –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.';
  await ctx.editMessageText(text, { reply_markup: kb });
}

export async function onEnterNewReminderDate(ctx: CustomContext) {
  ctx.session.state = botState.reminderDate;
  await ctx.answerCallbackQuery();
  return await ctx.reply(reminderDateText);
}
const reminderDateText =
  'üìÖ –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.\n\n' +
  'üïí –ü—Ä–∏–º–µ—Ä—ã:\n' +
  '‚Äî –∑–∞–≤—Ç—Ä–∞ –≤ 14:00\n' +
  '‚Äî —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\n' +
  '‚Äî 25 –º–∞—è –≤ 18:30\n' +
  '‚Äî –≤ –ø—è—Ç–Ω–∏—Ü—É –≤ 9 —É—Ç—Ä–∞\n' +
  '‚Äî –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 10:00';

export async function onReminderDateMessage(ctx: CustomContext) {
  const message: string = ctx.msg.text;
  const parsedDate = chrono.ru.parseDate(message);
  if (parsedDate) {
    ctx.session.reminderDate = parsedDate;
    const kb = new InlineKeyboard().text('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callbackEnum.CREATE_REMINDER);

    await ctx.reply(
      'üìÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ' +
        parsedDate.toLocaleString('ru-RU') +
        '\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.',
      { reply_markup: kb },
    );
  } else {
    await onBadReminderDateMessage(ctx);
  }
}

export async function onBadReminderDateMessage(ctx: CustomContext) {
  await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ üôÇ');
}
export async function onCreateReminder(ctx: CustomContext) {
  const noteId = ctx.session.currentNoteId;

  const note = await prisma.note.findUnique({
    where: { messageId: noteId },
    include: { reminder: true },
  });

  const data: any = {
    user: { connect: { id: ctx.session.user.id } },
    note: { connect: { id: note.id } },
    remindAt: ctx.session.reminderDate,
  };

  try {
    let reminder;
    if (note.reminder)
      reminder = await prisma.reminder.update({ where: { id: note.reminder.id }, data });
    else reminder = await prisma.reminder.create({ data });
    await ctx.api.editMessageText(
      ctx.chat.id,
      ctx.callbackQuery.message.message_id,
      `‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ ${reminder.remindAt.toLocaleString('ru-RU')} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ`,
      { reply_markup: null },
    );
    await ctx.answerCallbackQuery('‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ');
  } catch {
    await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞');
  } finally {
    await onCancelNewReminder(ctx);
  }
}

export async function onCancelNewReminder(ctx: CustomContext) {
  const noteId = ctx.session.currentNoteId;
  const menuId = ctx.session.currentMenuId;
  await returnNoteMenu(ctx, noteId, menuId);
  ctx.session.reminderDate = undefined;
  ctx.session.currentNoteId = undefined;
  ctx.session.currentMenuId = undefined;
  ctx.session.state = botState.idle;
}

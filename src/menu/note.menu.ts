import { Menu, MenuRange } from '@grammyjs/menu';

import { botState } from '../types/bot-state';
import { CustomContext } from '../types/custom-context.interface';

import { mainMenuText } from './main.menu';
import { tryOpenNote } from './note-viewer.menu';

export const noteMenu = new Menu<CustomContext>('note-menu')
  .text('üîç –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫', async (ctx: CustomContext) => {
    if (await tryOpenNote(ctx)) return ctx.menu.nav('note-viewer-menu');
    else return ctx.reply('–ü–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.');
  })
  .row()
  .text('üìù –í–µ–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç', async (ctx: CustomContext) => {
    ctx.session.state = botState.noteSearch;
    await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–º–µ—Ç–∫–∏');
  })
  .row()
  .text('üîô –ù–∞–∑–∞–¥', async (ctx: CustomContext) => await noteBackToMenu(ctx))
  .row()
  .text('üóÇÔ∏è –í—Å–µ –ø–∞–ø–∫–∏', async (ctx: CustomContext) => {
    ctx.session.noteQuery.folder = undefined;
    await ctx.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ –ø–∞–ø–∫–∏');
  })
  .row()
  .dynamic(async (ctx: CustomContext) => await getFolders(ctx));

export async function onNoteSearchText(ctx: CustomContext) {
  ctx.session.state = botState.idle;
  ctx.session.noteQuery.text = ctx.msg.text;
  await ctx.api.setMessageReaction(ctx.chat.id, ctx.msg.message_id, [
    { type: 'emoji', emoji: 'üëç' },
  ]);
}

export async function onNoNoteSearchText(ctx: CustomContext) {
  ctx.session.noteQuery.text = undefined;
  await ctx.api.setMessageReaction(ctx.chat.id, ctx.msg.message_id, [
    { type: 'emoji', emoji: 'üëé' },
  ]);
  await ctx.reply('–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞');
}

async function getFolders(ctx: CustomContext) {
  const range = new MenuRange<CustomContext>();
  const folders = await prisma.folder.findMany({
    where: { userId: ctx.session.user.id },
    orderBy: [{ type: 'asc' }, { title: 'asc' }],
  });
  folders.forEach((folder) => {
    range
      .text(folder.title, async (ctx: CustomContext) => {
        ctx.session.noteQuery.folder = folder.id;
        await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞–ø–∫—É: ${folder.title}`);
      })
      .row();
  });
  return range;
}

export const noteMenuText =
  'üìã –ú–µ–Ω—é –∑–∞–º–µ—Ç–æ–∫.\n\n' +
  '–£–∫–∞–∂–∏–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø–∞–ø–∫—É \n(–ü–æ-—É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–º–µ—Ç–∫–∞)\n\n' +
  'üìå –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –ø–∞–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ:';

export async function noteBackToMenu(ctx: CustomContext) {
  ctx.session.noteQuery.folder = undefined;
  ctx.session.noteQuery.text = undefined;
  ctx.session.noteQuery.index = 0;
  await ctx.api.editMessageText(ctx.chat.id, ctx.callbackQuery.message.message_id, mainMenuText);
  return ctx.menu.back();
}
